Original code from https://github.com/ShaneBeee/SkriptSnippets/blob/master/snippets/player/Skin-Changer.sk
# Skin Changer
# By: ShaneBee, Yesang_, dorondo

# This is the fork of Simple Skin Changer
#It solves problem that skin have not been updated by others,
#add several different methods to get skin,
#add compatibility with Bettermodel

# Requires: Skript-Reflect and Paper (I should hope you already have Paper)


#set skin of %player% (with|by|from|to) name %string%
#skin from player's name
#example
#set skin of player with name "Dream"

#set skin of %player% (with|by|from|to) uuid %string%
#skin from mineskin's uuid (not uuid of real player)
#example
#set skin of player with uuid "4186635623a045bf87e7fdef6550948b"

#set skin of %player% (with|by|from|to) uuid %string%
#skin from player's uuid(mojang api)
#example
#set skin of player with mojang (uuid of player)

import:
    com.mojang.authlib.GameProfile
    com.mojang.authlib.properties.Property
    com.destroystokyo.paper.profile.ProfileProperty
    com.google.gson.JsonObject
    com.google.gson.JsonParser
    java.net.URI
    java.net.http.HttpClient
    java.net.http.HttpRequest
    java.net.http.HttpResponse
    java.util.List

    org.bukkit.Bukkit

effect set skin of %player% (with|by|from|to) (:name|:uuid|:mojang) %string%:
    trigger:
        if parse tags is "name":
            create new section with {_name}, {_player} stored in {_sec}:
                if {_player}'s name is {_name}:
                    {_player}.getProfile().getProperties().removeAll("textures")
                set {_o} to server.getServer().createProfile({_name})
                {_o}.complete(true)
                set {_pro} to {_player}.getPlayerProfile()
                {_pro}.setProperties({_o}.getProperties())
                return {_pro}
        else if parse tags is "uuid":
            create new section with {_uuid}, {_player} stored in {_sec}:
                set {_url} to "https://api.mineskin.org/v2/skins/%{_uuid}%?unsigned=false"
                set {_client} to HttpClient.newBuilder().build()
                set {_request} to HttpRequest.newBuilder().uri(URI.create({_url})).build()
                set {_response} to {_client}.send({_request}, HttpResponse.BodyHandlers.ofString())

                set {_skinResponse} to {_response}.body()
                set {_skinObject} to JsonParser.parseString({_skinResponse}).getAsJsonObject().get("skin").get("texture").getAsJsonObject("data")
                set {_value} to {_skinObject}.get("value").getAsString()
                set {_signature} to {_skinObject}.get("signature").getAsString()
                set {_profileProperty} to new ProfileProperty("textures", {_value}, {_signature})

                set {_pro} to {_player}.getPlayerProfile()
                {_pro}.setProperties(List.of(({_profileProperty})))
                return {_pro}
        else:
            create new section with {_uuid}, {_player} stored in {_sec}:
                set {_url} to "https://sessionserver.mojang.com/session/minecraft/profile/%{_uuid}%?unsigned=false"
                set {_client} to HttpClient.newBuilder().build()
                set {_request} to HttpRequest.newBuilder().uri(URI.create({_url})).build()
                set {_response} to {_client}.send({_request}, HttpResponse.BodyHandlers.ofString())
                
                set {_skinResponse} to {_response}.body()
                set {_skinObject} to JsonParser.parseString({_skinResponse}).getAsJsonObject().get("properties").getAsJsonArray().get(0).getAsJsonObject()
                set {_value} to {_skinObject}.get("value").getAsString()
                set {_signature} to {_skinObject}.get("signature").getAsString()
                set {_profileProperty} to new ProfileProperty("textures", {_value}, {_signature})

                set {_pro} to {_player}.getPlayerProfile()
                {_pro}.setProperties(List.of(({_profileProperty})))
                return {_pro}

        run section {_sec} async with arguments expr-2 and expr-1 and store result in {_pro} and wait
        expr-1.setPlayerProfile({_pro})

        set {_bm} to (class "kr.toxicity.model.api.BetterModel")
        {_bm} is set
        set {_bmskin} to {_bm}.plugin().skinManager()
        set {_gp} to {_pro}.getGameProfile()
        {_bmskin}.removeCache({_gp})
        {_bmskin}.getOrRequest({_gp})

expression [player] profile name of %player%:
    get:
        return (expr-1).getPlayerProfile().getName()
    set:
        set {_player} to expr-1
        set {_name} to change value
        if length of {_name} > 16:
            set {_name} to first 16 characters of {_name}
        set {_pro} to {_player}.getPlayerProfile()
        {_pro}.setName({_name})
        {_player}.setPlayerProfile({_pro})
#! EXAMPLE USAGE !#
command /setskin <name:string>:
	trigger:
		set profile name of player to {_name}
		set skin of player to {_name}
